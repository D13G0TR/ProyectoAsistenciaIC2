package cl.ipst.sca.frames;

import cl.ipst.sca.controllers.MarcadorController;
import cl.ipst.sca.model.Marcacion;
import cl.ipst.sca.model.Trabajador;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.Locale;
import javax.swing.JOptionPane;

/**
 * Ventana interna para marcar la asistencia de los trabajadores. Muestra la
 * fecha y hora actual, y permite a los trabajadores registrar su asistencia.
 *
 * @author rober
 */
public class frmMarcarAsistencia extends javax.swing.JInternalFrame {

    MarcadorController marcadorController = new MarcadorController();

    /**
     * Crea una nueva instancia de frmMarcarAsistencia. Inicializa la interfaz y
     * configura la fecha y hora actuales.
     */
    public frmMarcarAsistencia() {
        initComponents();
        fechaActual();
        horaActual();
    }

    /**
     * Actualiza el JLabel lblReloj con la hora actual en formato "HH:mm:ss".
     * Ejecuta un hilo que actualiza la hora cada 500 milisegundos.
     */
    private void horaActual() {
        DateTimeFormatter formateador = DateTimeFormatter.ofPattern("HH:mm:ss");
        Runnable runnable = new Runnable() {
            @Override
            public void run() {
                while (true) {
                    try {
                        Thread.sleep(500);
                        lblReloj.setText(formateador.format(LocalDateTime.now()));
                    } catch (InterruptedException e) {
                        System.out.println("Error en el reloj");
                        e.printStackTrace();
                    }
                }
            }
        };
        Thread hilo = new Thread(runnable);
        hilo.start();
    }

    /**
     * Muestra la fecha actual en el JLabel lblFecha en formato "EEEE, dd 'de'
     * MMMM 'del' yyyy".
     */
    private void fechaActual() {
        Date fecha = new Date(); // Fecha y hora actual
        SimpleDateFormat formatoFecha = new SimpleDateFormat("EEEE, dd 'de' MMMM 'del' yyyy", Locale.forLanguageTag("es-ES"));
        lblFecha.setText(formatoFecha.format(fecha)); // Setear la representación en cadena de la fecha  
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        lblReloj = new javax.swing.JLabel();
        lblFecha = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        btnSalida = new javax.swing.JButton();
        btnEntrada = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setTitle("Marcador");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Hora Actual");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 10, 260, -1));

        lblReloj.setFont(new java.awt.Font("Roboto", 1, 48)); // NOI18N
        lblReloj.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblReloj.setText("HH:MM:SS");
        lblReloj.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(lblReloj, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 300, 72));

        lblFecha.setFont(new java.awt.Font("Roboto", 1, 12)); // NOI18N
        lblFecha.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblFecha.setText("TODAY");
        lblFecha.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(lblFecha, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 90, 260, -1));
        getContentPane().add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 110, 280, 10));

        btnSalida.setBackground(javax.swing.UIManager.getDefaults().getColor("Actions.Red"));
        btnSalida.setForeground(new java.awt.Color(255, 255, 255));
        btnSalida.setText("Marcar Salida");
        btnSalida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalidaActionPerformed(evt);
            }
        });
        getContentPane().add(btnSalida, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 150, -1, -1));

        btnEntrada.setBackground(javax.swing.UIManager.getDefaults().getColor("Actions.Green"));
        btnEntrada.setForeground(new java.awt.Color(255, 255, 255));
        btnEntrada.setText("Marcar Entrada");
        btnEntrada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEntradaActionPerformed(evt);
            }
        });
        getContentPane().add(btnEntrada, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 150, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Método que se ejecuta al presionar el botón de entrada. Muestra un cuadro
     * de confirmación para verificar si el usuario desea marcar su entrada. Si
     * se confirma, registra la marcación de entrada en la base de datos y
     * muestra un mensaje con los detalles.
     *
     * @param evt Evento que representa la acción de presionar el botón.
     */
    private void btnEntradaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEntradaActionPerformed
        int respuesta = JOptionPane.showConfirmDialog(
                null,
                "¿Estás seguro de que deseas marcar ENTRADA?",
                "Confirmación",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE
        );

        // Manejar la respuesta
        if (respuesta == JOptionPane.YES_OPTION) {
            Trabajador tra = Trabajador.getInstancia();
            DateTimeFormatter formateador = DateTimeFormatter.ofPattern("HH:mm:ss");

            Date fecha = new Date();
            SimpleDateFormat formatoFecha = new SimpleDateFormat("dd/MM/yyyy");

            String mensaje = "<html><div>"
                    + "<b>Marcación registrada exitosamente</b><br>"
                    + "<br>"
                    + "<hr><br>"
                    + "RUT: " + tra.getRutTra() + "-" + tra.getDvTra() + " <br>"
                    + "<br>"
                    + "Nombre: " + tra.getNombresTra() + " " + tra.getApellidosTra() + " <br>"
                    + "<br>"
                    + "Tipo de Marcación: Entrada <br>"
                    + "<br>"
                    + "Hora: " + formateador.format(LocalDateTime.now()) + "<br>"
                    + "<br>"
                    + "Fecha: " + formatoFecha.format(fecha) + "<br>"
                    + "<br>"
                    + "</div></html>";

            //GUARDAR REGISTRO EN BBDD
            Marcacion m = new Marcacion(0, tra, LocalDate.now(), LocalTime.now(), 0);

            boolean res = marcadorController.agregarMarcacion(m);
            if (res) {
                JOptionPane.showMessageDialog(null, mensaje, "Información del sistema", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null, "Hubo un error al guardar el registro.", "Marcación cancelada", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "No se ha guardado ningún registro.", "Marcación cancelada", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnEntradaActionPerformed
    /**
     * Método que se ejecuta al presionar el botón de salida. Muestra un cuadro
     * de confirmación para verificar si el usuario desea marcar su salida. Si
     * se confirma, registra la marcación de salida en la base de datos y
     * muestra un mensaje con los detalles.
     *
     * @param evt Evento que representa la acción de presionar el botón.
     */
    private void btnSalidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalidaActionPerformed
        int respuesta = JOptionPane.showConfirmDialog(
                null, // Componente padre
                "¿Estás seguro de que deseas marcar SALIDA?", // Mensaje
                "Confirmación", // Título del diálogo
                JOptionPane.YES_NO_OPTION, // Tipo de opciones (Sí/No)
                JOptionPane.QUESTION_MESSAGE // Tipo de mensaje (pregunta)
        );

        // Manejar la respuesta
        if (respuesta == JOptionPane.YES_OPTION) {
            Trabajador tra = Trabajador.getInstancia();
            DateTimeFormatter formateador = DateTimeFormatter.ofPattern("HH:mm:ss");

            Date fecha = new Date(); //fecha y hora actual
            SimpleDateFormat formatoFecha = new SimpleDateFormat("dd/MM/yyyy");

            String mensaje = "<html><div>"
                    + "<b>Marcación registrada exitosamente</b><br>"
                    + "<br>"
                    + "<hr><br>"
                    + "RUT: " + tra.getRutTra() + "-" + tra.getDvTra() + " <br>"
                    + "<br>"
                    + "Nombre: " + tra.getNombresTra() + " " + tra.getApellidosTra() + " <br>"
                    + "<br>"
                    + "Tipo de Marcación: Salida <br>"
                    + "<br>"
                    + "Hora: " + formateador.format(LocalDateTime.now()) + "<br>"
                    + "<br>"
                    + "Fecha: " + formatoFecha.format(fecha) + "<br>"
                    + "<br>"
                    + "</div></html>";

            //GUARDAR REGISTRO EN BBDD
            Marcacion m = new Marcacion(0, tra, LocalDate.now(), LocalTime.now(), 1);

            boolean res = marcadorController.agregarMarcacion(m);
            if (res) {
                JOptionPane.showMessageDialog(null, mensaje, "Información del sistema", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null, "Hubo un error al guardar el registro.", "Marcación cancelada", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "No se ha guardado ningún registro.", "Marcación cancelada", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSalidaActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEntrada;
    private javax.swing.JButton btnSalida;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblFecha;
    private javax.swing.JLabel lblReloj;
    // End of variables declaration//GEN-END:variables
}
